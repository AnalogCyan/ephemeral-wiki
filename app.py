from flask import Flask, jsonify
from flask_limiter import Limiter
from flask_talisman import Talisman
from flask_cors import CORS
from flask_limiter.util import get_remote_address
from google.cloud import secretmanager
import openai
import os

app = Flask(__name__)
app.config["SESSION_COOKIE_SECURE"] = True
app.config["REMEMBER_COOKIE_SECURE"] = True
ALLOWED_ORIGINS = [
    "https://ephemeral.wiki",
    "https://www.ephemeral.wiki",
]
cors = CORS(app, resources={r"/*": {"origins": ALLOWED_ORIGINS}})
limiter = Limiter(app, default_limits=["3 per minute"])
Talisman(app)

project_id = "305288752300"
secret_name = "OpenAI"
secret_version = "1"


def get_secret_value(project_id, secret_name, secret_version):
    client = secretmanager.SecretManagerServiceClient()
    name = f"projects/{project_id}/secrets/{secret_name}/versions/{secret_version}"
    response = client.access_secret_version(name)
    return response.payload.data.decode("UTF-8")


openai.api_key = get_secret_value(project_id, secret_name, secret_version)


def generate(path):
    if path == "" or path == "/" or path == "index.html" or path == "/index.html":
        prompt = (
            "Create an html document for the home page of a website titled 'Ephemeral Wiki'.\n"
            + "The page should explain what the website is about and how to use it.\n"
            + "The Ephemeral Wiki is a website where every page is ephemeral and generated by GPT-3.5-Turbo.\n"
            + "Web pages only exist while they are being viewed, and are re-generated each time they are visited.\n"
            + "Note to the user that the site is rate-limited to 3 requests per minute.\n"
            + "Users can visit any URL path on the site and the server will generate a response document.\n"
            + "Be sure to include relevant html head tags and a title.\n"
            + "The home page should also contain a list of relative links as examples.\n"
            + "Optionally add some CSS styling.\n"
        )
    else:
        prompt = (
            "Create an html document with content that matches the following URL path:\n"
            + path
            + "\n\nAdd relative href links to related topics.\n"
            + "Be sure to include a warning at the end of the page stating it was generated by GPT-3.5-Turbo, and should not be considered authoritative.\n"
            + "Optionally add some CSS styling.\n"
        )

    response = openai.ChatCompletion.create(
        model="gpt-3.5-turbo",
        messages=[{"role": "system", "content": prompt}],
        max_tokens=4096 - len(prompt),
        top_p=1,
        frequency_penalty=0,
        presence_penalty=0,
    )
    return response["choices"][0]["message"]["content"]


@app.route("/", defaults={"path": "/"}, methods=["GET", "POST"])
@app.route("/<path:path>", methods=["GET", "POST"])
@limiter.limit("3 per minute")
def catch_all(path):
    response = generate(path)
    return response, 200, {"Content-Type": "text/html"}


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
    # app.run(debug=True)
